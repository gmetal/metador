plugins {
    id "com.android.library"
    id "kotlin-android"
    id "de.mannodermaus.android-junit5"
    id "org.jetbrains.dokka" version "$dokkaVersion"
}
apply from: "$project.rootDir/spotless.gradle"

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
        useIR = true
    }
}

dokkaHtml {
    moduleName.set("Metador")
    dokkaSourceSets {
        main {
            displayName.set("main")
            includes.from("description.md")
            jdkVersion.set(8)
            suppress.set(false)
            platform.set(org.jetbrains.dokka.Platform.jvm)
            noStdlibLink.set(false)
            noJdkLink.set(false)
            noAndroidSdkLink.set(false)
        }
    }
}

dokkaJavadoc {
    moduleName.set("Metador")
    dokkaSourceSets {
        main {
            displayName.set("main")
            includes.from("description.md")
            jdkVersion.set(8)
            suppress.set(false)
            platform.set(org.jetbrains.dokka.Platform.jvm)
            noStdlibLink.set(false)
            noJdkLink.set(false)
            noAndroidSdkLink.set(false)
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    implementation "com.squareup.okhttp3:okhttp:$okHttpVersion"
    implementation "org.jsoup:jsoup:1.13.1"
    implementation "androidx.annotation:annotation:1.2.0-rc01"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"
    implementation "com.michael-bull.kotlin-result:kotlin-result:$kotlinResult"

    // (Required) Writing and executing Unit Tests on the JUnit Platform
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit5Version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit5Version"
    testImplementation "com.michael-bull.kotlin-result:kotlin-result:$kotlinResult"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5Version"

    // (Optional) If you need "Parameterized Tests"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit5Version"
    testImplementation "io.mockk:mockk:$mockkVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okHttpVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"
}

task archiveSources(type: Jar) {
    classifier('sources')
    from android.sourceSets.main.java.srcDirs
    exclude("dev/gmetal/metador/response")
}


task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    group "publishing"
    description "Generates javadocJar based on Dokka"
    archiveClassifier.set("javadoc")
    from dokkaJavadoc.outputDirectory
}

